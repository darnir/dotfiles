#!/bin/bash

# Dotfiles Manager
# Author: Darshit Shah  <darnir@gmail.com>
# License: MIT
#
# This is the main "Package Manager" script for the dotfiles manager.
# Dotfiles Manager is a new way of managing all your dotfiles on a *nix
# system. The idea behind this project is to bundle a set of similar files as a
# package that can be shared singularly. Creating such "packages" of dotfiles
# also helps in maintaining them in the long run.
#
# This project works by creating a symlink from the Package to the location on
# the system where it needs to be. As a result, any changes to the
# confioguration files, AFTER the package has been installed will automatically
# be reflected in the repository. Since this is a Git repository, one can look
# at the diffs of the changes and revert back to the original state very easily.
# Once, you have confirmed that the changes are good, they should be committed
# to the repository.
#
# PACKAGING:
# We use the term "dotfile package" in this project. A dotfile package is a
# collection of files which configure a particular aspect of the system. Hence,
# one can have a package for Vim, Bash, SSH, X, etc. To make a new package,
# create a directory with the package name in the root of the repository. This
# directory should contain all the files which should be handled by the dotfile
# manager. All the files and directories which should be handled by the dotfile
# manager, should reside only in the top level of the package directory.
# Next, one needs to write the install script for this package.
#
# INSTALL SCRIPTS:
# Install scripts are small snippets which tell the dotfile manager which
# configuration file needs to be placed at which location in the system.
# An install script MUST define the PACKAGE_NAME variable to state what package
# the script is for. The value of this variable must coincide exactly with the
# name of the directory in which the configuration files are stored. The
# dotfiles manager calls the following three functions in that order:
#   * package()
#   * install()
#   * post_install()
#
# USAGE:
# The dotfiles script lies in the root directory of the dotfiles repository.
# Use this script to list all available dotfile packages and to install them.
#
# For more information, please refer to the README file available in the
# repository.

set -e
set -u
set -o pipefail
# set -x

# Soure the various functions that are called by the install scripts
source dotfile_installer || exit

# Logging Framework
source .bash_logging || exit

# Location and name of the log file
LOGFILE="dotfiles.log"
INSTALL=".install_db"
TEMPDB="/tmp/dotfile_tmp"

BASEPKG=""

log_init ${LOGFILE}


# #######################################
# Install a package as a dependency of another
# Globals:
#	BASEPKG
#	TEMPDB
# Arguments:
#   Package_Name: Name of package to be installed as a dependency
# Returns:
#   None
#######################################
install_dependency() {
    if [[ $BASEPKG == "" ]]; then
        exit 1
    fi
	log_std "=== New Log Entry: $(date) ==="
    log_info "Installing Dependency $1"
    echo -e "\n## $1 -> $BASEPKG" > $TEMPDB
    install_package "$1"
}

install_direct() {
    pkgname=${1%/}
	log_std "=== New Log Entry: $(date) ==="
	log_info "Installing package $pkgname"
    # write_log "$(_info "Installing package $pkgname\n")"
    echo -e "\n## $pkgname" > $TEMPDB
    install_package "$pkgname"
}


# Function: install_package() [PKG Name]
# Handle the -I switch.
install_package() {
    # Create the install database if it doesn't exist. The install database is a
    # markdown file that contains a list of packages installed and the file
    # mappings
    if [[ ! -f "$INSTALL" ]]
    then
        echo "# Installed Packages" > $INSTALL
    fi

    local pkgname="$1"
    local pkgdir="Packages/$pkgname"
    local pkgbuild="$pkgdir/InstallScript"

    if [[ -f $pkgbuild ]]
    then
        source "$pkgbuild"
    else
		log_error "Cannot find Install Script for $pkgname"
        return 2
    fi
    if [[ ! -d "$pkgdir" ]]
    then
		log_error "Unable to locate package $pkgname"
        return 2
    fi

    if [[ $(type -t prepare) == "function" ]]
    then
		log_all "white" "Running Pre-Install Hooks"
		log_all "nc" "$(eval prepare 2>&1)"
		log_std ""
    fi

	log_user "nc" "$(eval install 2>&1)"

    if [[ $(type -t post_install) == "function" ]]
    then
		log_all "white" "\nRunning Post-Install Hooks"
		log_all "nc" "$(eval post_install 2>&1)"
    fi
	log_std "=== End of Log Entry ==="
    cat $TEMPDB >> $INSTALL
}

# Function: list_package()
# Handle the -l switch. This package looks into the InstallScripts directory for
# all available installscripts. Installscripts are identified using their
# ".dotfiles" extension and then listed here.
list_packages() {
    echo "Packages available:"
    for pkg_dir in Packages/*/
    do
        if [ -f $pkg_dir/InstallScript ]; then
            echo "$(basename $pkg_dir)"
        fi
    done
}

# Function: print_help()
# Handle the -h switch. Print the usage information about the script
print_help() {
    echo "Usage: $0 [Options]"
    echo "List of valid options:"

	echo "-S package  : Install dotfiles package \"package\""
    echo "-Q          : List available packages"
    echo "-h          : Print this help and exit"
    echo "Remember, this script must only be invoked from the root dir of the \
repository"
}

# main()
# The script begins here with parsing the command line arguments and invoking
# the relevant functions
while getopts "S:b:d:Qht" options
do
    case $options in
        S) install_direct "$OPTARG";;
        b) BASEPKG="$OPTARG";;
        d) install_dependency "$OPTARG";;
        Q) list_packages;;
        h) print_help;;
		t) log_test;;
        *) print_help;;
   esac
done
