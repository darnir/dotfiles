#!/bin/bash

# Helper functions for Dotfies Manager
#
# This file contains a bunch of helper functions for installing files and
# directories using the Dotfiles Manager script.
#
# Author: Darshit Shah  <darnir@gmail.com>
# License: MIT

# This helper function gets the location of where the configuration file should
# exist on the system based on the keywords passed to it. Supported keywords
# are:
#   * home: Stores the file in the user's $HOME dir with a dot (.) affixed to
#   the filename.
#   * etc: Attempts to store the file in the user's /etc directory. The command
#   should be executed with superuser privileges. TODO: Automatically set
#   SUDO when the location is /etc
#   * bin: Symlink the file in the /usr/local/bin/ directory. TODO:
#   Automatically set SUDO when location is bin
#   * systemd-user: Attempts to install the file as a unit file in the systemd
#   user configuration directory, ~/.config/systemd/user/. TODO: Automaically
#   set the file to to create a hardlink when installing a systemd unit file
#   * autostart: Install the file to ~/.config/autostart.
#   If none of the above keywords are provided, the parameter is assumed to
#   contain the absolute path to the directory where the file should be
#   installed.
_get_conf_file() {
    local confpath
    case "$1" in
        etc) confpath="/etc/${_CONF_NAME}";;
        home) confpath="$HOME/.${_CONF_NAME}";;
        bin) confpath="/usr/local/bin/${_CONF_NAME}";;
        systemd-user) confpath="$HOME/.config/systemd/user/${_CONF_NAME}";;
        autostart) confpath="$HOME/.config/autostart/${_CONF_NAME}";;
        *) confpath="$1/${_CONF_NAME}"
    esac
    echo "$confpath"
}

_check_sudo() {
    if [[ $1 == true ]]
    then
        echo "sudo"
    else
        echo ""
    fi
}

_set_linktype() {
    if [[ -z $1 || $1 == true ]]
    then
        echo "-s "
    else
        echo ""
    fi
}

_test_source_file() {
    _info "Checking if ${_CONF_NAME} exists in package"
    if [ ! -f "${_LOC_FILE}" ]
    then
        _warn "Source file not found. Will create empty symlink"
    fi
}

_backup_target() {
    _info "Checking if ${_CONF_FILE} exists"
    if [ -f "${_CONF_FILE}" ]
    then
        _BACKUPNAME="${_BCK_FILE}"
        _BCKNO=1
        while [ -f "${_BACKUPNAME}" ]; do
            _BACKUPNAME="${_BCK_FILE}.${_BCKNO}"
            _BCKNO=$((_BCKNO+1))
        done
        _warn "Target file found, saving to ${_BACKUPNAME}"
        if [ -L "${_CONF_FILE}" ]
        then
            REAL_CONF=$(realpath "${_CONF_FILE}")
            ${SUDO} cp -v -R "${REAL_CONF}" "${_BACKUPNAME}"
            ${SUDO} rm -v "${_CONF_FILE}"
        else
            ${SUDO} mv -v "${_CONF_FILE}" "${_BACKUPNAME}"
        fi
    else
        _info "Target file not found"
    fi
}

_backup_target_dir() {
    _info "Checking if ${_CONF_DIR} exists"
    if [ -d "${_CONF_DIR}" ]
    then
        _warn "Target directory found, saving to ${_BCK_DIR}"
        $SUDO mv -v "${_CONF_DIR}" "${_BCK_DIR}"
    else
        _info "Target directory not found"
    fi
}

# Function: install_file()
# Parameter List:
#   $1 : Conf File Name
#   $2 : Install Path for Conf File
#   $3 : Needs root privileges to install?
#   $4 : Is a symlink? (Default: Yes)
install_file() {
    local _CONF_NAME="$1"
    local _CONF_FILE=$(_get_conf_file "$2")
    local _BCK_FILE=${_CONF_FILE}.bck
    local _LOC_FILE=$(pwd)/${PACKAGE_NAME}/${_CONF_NAME}

    local SUDO=$(_check_sudo "$3")
    local linktype=$(_set_linktype "$4")

    _test_source_file
    _backup_target

    _info "Linking dotfile ${_CONF_NAME} to ${_CONF_FILE}"
    ${SUDO} ln ${linktype}"${_LOC_FILE}" "${_CONF_FILE}"
    echo ""
}

install_private_file() {
    local _CONF_NAME="$1"
    local _CONF_FILE=$(_get_conf_file "$2")
    local _BCK_FILE=${_CONF_FILE}.bck
    local _LOC_FILE="/media/truecrypt1/${_CONF_NAME}"

    local SUDO=$(_check_sudo "$3")
    local linktype=$(_set_linktype "$4")

    _info "Checking if ${_LOC_FILE} is mounted"
    if [[ ! -f "${_LOC_FILE}" ]]
    then
        _warn "Private configuration file not found."
        _info "Will continue and create symlink to location"
    else
        _backup_target
    fi

    _info "Linking dotfile ${_CONF_NAME} to ${_CONF_FILE}"
    ${SUDO} ln ${linktype}"${_LOC_FILE}" "${_CONF_FILE}"
    echo ""
}

install_directory() {
    local _CONF_NAME="$1"
    local _CONF_DIR=$(_get_conf_file "$2")
    local _BCK_DIR=${_CONF_DIR}bck
    local _LOC_DIR=$(pwd)/${PACKAGE_NAME}/${_CONF_NAME}

    local SUDO=$(_check_sudo "$3")
    local linktype=$(_set_linktype "$4")

    _backup_target_dir

    _info "Linking dotfile ${_CONF_NAME} to ${_CONF_DIR}"
    $SUDO ln ${linktype}"${_LOC_DIR}" "${_CONF_DIR}"
    echo ""
}

install_aur() {
    true
}


################################################################################
# Custom Functions for use by the dotfile package installers                   #
################################################################################

safetouch() {
    if [ ! -f "$1" ]
    then
        _info "Touching $1"
        touch "$1"
    else
        _info "$1 exists, not touching"
    fi
}

isarchlinux() {
    _info "Checking if current system is Arch Linux..."
    if which pacman &> /dev/null
    then
        _info "System is Arch Linux. Continuing..."
        return 0
    else
        _warn "System is not Arch Linux."
        return 1
    fi
}
