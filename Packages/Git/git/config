[advice]
    statusHints = False
    detachedHead = False

[alias]
    commits = commit --signoff
    unstage = reset HEAD --
    diffc   = diff --cached
    cpn     = cherry-pick -n
    cp      = cherry-pick
    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=format:'%Cred%h%Creset [%G?] -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' -n 20 --abbrev-commit --graph
	ll = log --no-merges --date=short --pretty='format:%ad %an <%ae>%w(0,0,5)%+B'
    # View the current working tree status using the short format
    s = status -s
    # Commit all changes
    ca = !git add -A && git commit -av
    # Switch to a branch, creating it if necessary
    go = checkout -B
    co = checkout
    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v
    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"
    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"
    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
    # Remove branches that have already been merged with master
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # Create patch files for all commits to branch since origin/HEAD
    fp = format-patch origin/HEAD

    # Reset the repository...
    # ... to origin/HEAD
    ro = reset --hard origin/HEAD
    rh = reset --hard HEAD

	uds = "config user.email \"s8dashah@stud.uni-saarland.de\""
	gnu = "config user.email \"darnir@gnu.org\""

[am]
    messageid = true

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[color]
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "decorate"]
	remoteBranch = 202

[color "diff"]
    meta = yellow bold
    commit = green bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[column]
    ui = auto
	tag = auto dense

[core]
	askpass =
    editor = nvim
    attributesfile = $XDG_CONFIG_HOME/git/attributes
    # Treat spaces before tabs and all kinds of trailing whitespace as an error.
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of
    # a line
    whitespace = space-before-tab,trailing-space,blank-at-eof
	eol = lf
	pager = diff-so-fancy | less --tabs=4 -RFX

[credential]
    helper = cache --socket $XDG_RUNTIME_DIR/git-credential-cache.socket
    helper = store
	useHttpPath = false

[diff]
    renames = copies
    mnemonicprefix = true
    submodule = log
	compactionHeuristic = true

[diff "gpg"]
	textconv = gpg -v
	xfuncname = "^((pub|uid) .*)"

[diff-so-fancy]
	changeHunkIndicators = true

[grep]
    lineNumber = true
    extendedRegexp = true

[help]
    autocorrect = 1

[log]
	showSignature = false

[merge]
	tool = vimdiff
	conflictStyle = diff3

[mergetool]
	path = nvim

[push]
    default = simple

[remote-hg]
	hg-git-compat = true

[rerere]
    enabled = true

[stash]
    showPatch = true

[tag]
	forceSignAnnotated = true

[user]
    email = darnir@gmail.com
    name = Darshit Shah
    signingkey = "2A1743EDA91A35B6"

[sendemail]
	smtpserver = /home/thedoctor/.local/bin/msmtp

;  vim: set ts=4 sts=4 sw=4 tw=79 ft=gitconfig noet :
