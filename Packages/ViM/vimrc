"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                         ViM Configuration File                              "
"                                                                             "
"  This file contains the various custom settings for the Vi IMproved editor  "
"                                                                             "
" (C)2013 Darshit Shah                                                        "
"                                                                             "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Ensure that files are UTF-8 Encoded by default {{{
if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
   set fileencodings=ucs-bom,utf-8,latin1
endif
" }}}

" General Editor Settings {{{
set nocompatible            " Use Vim defaults (much better!)
set bs=indent,eol,start     " Allow backspacing over everything in insert mode
set viminfo='20,\"50        " Read/write a .viminfo file, don't store more
                            " than 50 lines of registers
set history=50              " Keep 50 lines of command line history
set spellfile=$HOME/.vim/spell/en.utf-8.add
                            " Set a custom path for the spellfile
set autoread                " Automatically reload the buffer if the local file changes
set modeline                " Enable modeline support
let mapleader=","           " Remap the leader key to something more convenient
set wildignore=*.swp,*.bak,*.pyc,*.class,*.o,*.~,*.aux,*.log,*.out,*.blg,*.lot,*.toc,*.pdf
set nrformats-=octal        " When using C-a / C-x, don't consider octals
                            " Ignore these files unconditionally
set omnifunc=syntaxcomplete#Complete
                            " Enable omni-completion in Vim
set lazyredraw              " Delay redrawing screen during macros. Performance boost
set tabpagemax=100          " Load upto 100 tabs max
set clipboard=unnamedplus   " Use the system clipboard as the default unnamed register
set diffopt=filler          " Keep the text synchronized in a diff window
set gdefault                " Always set the 'g' value when substitiuting
set hidden                  " Use hidden buffers
set nojoinspaces            " Don't add an extra space between sentences when joining lines
set nostartofline           " Don't move to start of line when moving around
set viminfo=%,'9999,s512,n~/.vim/viminfo
                             " Restore buffer list, marks are remembered for 9999 files,
                             " registers up to 512Kb are remembered,
set switchbuf=useopen,usetab " Use existing open buffers and tabs to find file first
set wrapscan                 " Wrap searches around EOF

set directory=/tmp/          " Temp. swap files need not persist
" }}}

" Editor UI Settings {{{
set ruler                   " Show the cursor position all the time
set showcmd                 " Show the command you are currently typing
set formatoptions+=tcroqlnj
                            " Set various options for formatting text in Vim.
                            " See :help formatoptions for details
set wildmenu                " Use Wildcard expansion menu
set display+=lastline       " When lines exceed the screen size, display as much
                            " as possible. Useful for HTML development.
set so=6                    " Keep a buffer of 6 lines top and bottom when scrolling
set relativenumber          " Show relative line numbers
set noshowmode              " Airline already shows this
set shortmess=atI           " Change the messages shown by vim
set visualbell              " Use a visual bell instead of a beep
set noerrorbells            " Disable bells on errors
set laststatus=2            " Always show status bar
" }}}

" Indentation and Tab Settings {{{
set autoindent              " Always set autoindenting on
set smartindent             " Set smart indenting
set expandtab               " Expand Tabs to Spaces
set shiftwidth=4            " Number of columns to move at each indent level
set softtabstop=4           " Number of columns moved on a <tab> key
set tabstop=4               " Number of columns a Tab represents
set smarttab                " Enable Smart tab'ing
set textwidth=79            " Auto wrap at char 80
" }}}

" Search Options {{{
set smartcase               " Use smart case sensitivity when searching
set incsearch               " Use incremental search
set magic                   " Use magic regex during searches
"This unsets the 'last search pattern' register by hitting return
nnoremap <CR> :noh<CR><CR>
" }}}

" Mouse Settings {{{
set mouse=a                 " Use the mouse in all modes in Vim
set ttymouse=xterm2         " Set the terminal type on which we are running Vim
set ttyfast                 " Improves Vim scrolling performance
" }}}

" " Status Line {{{
" " We no longer use this status line. However it is a good fallback in case
" " vim-airline breaks.
" " XXX: This status line relies too much on plugins. For a good fallback, clean
" " it up to work with default ViM.
" set laststatus=2            " Always show status bar
" set statusline+=%<%F        " Full File path
" set statusline+=\ [%{strlen(&fenc)?&fenc:'none'},%{&ff}]
"                             " Display file encoding and format
" set statusline+=%h%m%r%y    " Various metadata
" set statusline+=%{fugitive#statusline()}
"                             " Git
" set statusline+=%=          " Begin Right aligned block
" set statusline+=%{TagName()}
"                             " Display current tag through Ctags
" set statusline+=\ %c,%l/%L\ %P
"                             " File Nav info
" " }}}

" Vundle Configuration {{{

filetype off                " Required as a workaround. See #176
set rtp+=~/.vim/bundle/Vundle.vim
                            " Edits the runtime path to include vundle
call vundle#begin()         " Initiate Vundle

" Always ensure that vundle manages vundle
Plugin 'VundleVim/Vundle.vim'

Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'spolu/dwm.vim'

Plugin 'bling/vim-airline'
Plugin 'tpope/vim-vividchalk'
Plugin 'scrooloose/syntastic'
Plugin 'eapache/rainbow_parentheses.vim'

Plugin 'gabrielelana/vim-markdown'
Plugin 'hdima/python-syntax'
Plugin 'Firef0x/PKGBUILD.vim'

Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-git'

call vundle#end()
filetype plugin indent on
" }}}

" {{{ Set Colorscheme
" We must the colorscheme only AFTER Vundle has been loaded so that the
" relevant rtp has been set.

set background=dark
colorscheme vividchalk          " Set the theme for Vim
"}}}

" Reset autocmds {{{
autocmd!
" When a vimrc is sourced, the autocommands may be added again. Hence, clear
" all the autocommands before defining any of our own
"  }}}

" Autocmd  Settings {{{

" Set spell checking only on files that make sense. Like TeX, mail and Markdown
autocmd FileType tex setlocal spell spelllang=en_us
autocmd FileType mail setlocal spell spelllang=en_us
autocmd FileType markdown setlocal spell spelllang=en_us

" When editing a file, always jump to the last cursor position
autocmd BufReadPost *
\ if line("'\"") > 0 && line ("'\"") <= line("$") |
\   exe "normal! g'\"" |
\ endif

" Instead of reverting the cursor to the last position in the buffer, we
" set it to the first line when editing a git commit message
au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" Create non-existant directories
function s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

" }}}

" Airline settings {{{
let g:airline_theme="badwolf"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
" }}}

" Keyboard Shortcuts {{{
set pastetoggle=<F2>        " Toggle paste mode with <F2>
" Pressing <leader>ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>
" :W sudo saves the file
" (useful for handling the permission-denied error)
command W w !sudo tee % > /dev/null

nnoremap <leader><leader> <Esc>
inoremap <leader><leader> <Esc>

nnoremap <leader>m :!make<Esc>

nnoremap <leader>r :RainbowParenthesesActivate<CR>
nnoremap <leader>o o<ESC>
nnoremap <leader>O O<Esc>

nnoremap <F5> :buffers<CR>:buffer<Space>

nnoremap t i<CR><ESC>
nnoremap s :%s/\s\+$//e
" }}}

" Syntastic Settings {{{

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_c_checkers = []
" }}}

" Syntax highlighting {{{
" Switch syntax highlighting on, when the terminal has colors Also switch on
" highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesActivate
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
" }}}

" Custom Functions {{{
" AppendModeline() {{{
" Append modeline after last line in buffer.  Use substitute() instead of
" printf() to handle '%%s' modeline in LaTeX files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sts=%d sw=%d tw=%d %set :",
        \ &tabstop, &softtabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>
" }}}

" DiffOrig() {{{
" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.  Only define it when not
" defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
            \ | wincmd p | diffthis
endif
" }}}

" cursor sniper {{{
set updatetime=2000

function! MySetCursor()
	set cursorline
	set cursorcolumn
endfunction
function! MyUnSetCursor()
	set nocursorline
	set nocursorcolumn
endfunction

au! CursorHold * call MyUnSetCursor()
au! CursorMoved * call MySetCursor()
au! CursorMovedI * call MyUnSetCursor()
" }}}

" }}}

" Highlight trailing whitespaces {{{
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
" }}}

" vim: set ts=4 sts=4 sw=4 tw=80 fdm=marker et :
