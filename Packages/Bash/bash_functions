#!/bin/bash

# Bash Utility Functions

# Function: pastebin()
# Expects data on standard input that is then sent to ix.io for sharing text
# snipets. The URL of the file on ix.io is printed to screen.
pastebin() {
    if [ $# -gt 0 ]
    then
        _error "This function only accepts input from stdin"
        return 100
    fi
    curl -F 'f:1=<-' ix.io;
}

# Function: tre()
# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Function: calc()
# This is a simple command line calculator for Bash. It uses bc to compute
# various results. Give it a valid bc expression and this function will try to
# evaluate its value. Complex output may cause problems on the printf statement.
calc() {
    local result="";
    result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')";
    #                           └─ default (when `--mathlib` is used) is 20
    #
    if [[ "$result" == *.* ]]; then
        # improve the output for decimal numbers
        printf "$result" |
        sed -e 's/^\./0./' `# add "0" for cases like ".5"` \
            -e 's/^-\./-0./' `# add "0" for cases like "-.5"`\
            -e 's/0*$//;s/\.$//'; # remove trailing zeros
    else
        printf "$result";
    fi;
    printf "\n";
}

# Function: pack()
# Expects a filename with a valid extension as the first paramter. All other
# parameters list the files that need to be included in the compressed file.
# This function is the dual of the above extract() function. Given a filename,
# it recognizes the type and creates the respective compressed file containing
# all the files provided on the command line.
pack() {
  local FILE
  FILE=$1
  case $FILE in
    *.tar.bz2)  shift && tar cjf "$FILE" "$*" ;;
    *.tbz2)     shift && tar cjf "$FILE" "$*" ;;
    *.tar.gz)   shift && tar czf "$FILE" "$*" ;;
    *.tgz)      shift && tar czf "$FILE" "$*" ;;
    *.zip)      shift && zip "$FILE" "$*"     ;;
    *.rar)      shift && rar "$FILE" "$*"     ;;
  esac
}

# Function: note()
# Another simple but extremely useful utlity function. This was copied from the
# ArchWiki too. Expects a bunch of text as its parameters which is then stored
# in ~/.notes file.
# Commands:
# Add a new note:  $ note <Enter note here>
# Display notes:   $ note
# Clean all notes: $ note -c
note () {

    NOTES="$HOME/.notes"
    #if file doesn't exist, create it
    [ -f "$NOTES" ] || touch "$NOTES"
    #no arguments, print file
    if [ $# = 0 ]
    then
        cat "$NOTES"
    #clear file
    elif [ "$1" = -c ]
    then
        > "$NOTES"
    #add all arguments to file
    else
        echo "$@" >> "$NOTES"
    fi
}
# Function: pdftools()
#
# Simple common operations to perform on a (set of) PDF file(s) +

# Actions:
#   compress:  Compress a PDF to reduce quality and space
#   join:      Join multiple PDF files into a single file
pdftools() {
    ACTION="$1"
    case $ACTION in
        compress) gs -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook -sOutputFile="$2" "$3";;
        join) gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -dPDFSETTINGS=/prepress -sOutputFile="$2" "${@:3}";;
    esac
}

ssh-genkey() {
    if [[ -z $1 ]]
    then
        echo -e "Usage: ssh-genkey [name]"
        return 1
    fi
    mkdir "$HOME/.ssh/$1"
    ssh-keygen -C "darnir@gmail.com" -f "$HOME/.ssh/$1/id_rsa"

    cat <<EOF >> $HOME/.ssh/config

Host $1.com
    User darnir
    Hostname $1.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/$1/id_rsa
EOF

    echo "Identity Settings written to config file. Please verify:"
    vim "$HOME/.ssh/config"
}

cleanswap() {
    SWDEV=$(swapon -s | tail -1 | awk '{print $1}')
    sudo swapoff $SWDEV
    sudo swapon $SWDEV
}

rtems() {
    if [[ $# -eq 0 ]]; then
        _ver="4.12"
    else
        _ver="$1"
    fi

    pushd "$HOME/Programming/rtems"
    source venv-rtems/bin/activate
    export PATH=$HOME/Programming/rtems/$_ver/bin:$PATH
    export RTEMS_ACTIVE=1
    export RTEMS_VER="$_ver"
    unset CC
    export PS1="\n"${SH_WHITE}${TL_ANGLE}"("${SH_BLUE}"\u"${SH_WHITE}"@"${SH_RED}"\h"${SH_WHITE}")"${HORIZ_LINE}"("${SH_GREEN}"\$?"${SH_WHITE}")"${HORIZ_LINE}"("${SH_GREEN}${BATT}${SH_WHITE}")"${HORIZ_LINE}"("${SH_GREEN}"\@ \d"${SH_WHITE}")"${HORIZ_LINE}"("${SH_RED}"RTEMS $_ver"${SH_WHITE}")\n"${BL_ANGLE}${HORIZ_LINE}"("${SH_GREEN}"\w"${SH_WHITE}")"${HORIZ_LINE}"("${SH_YELLOW}${FILES_STAT}" files, "${FILES_SIZE}${SH_WHITE}")"${HORIZ_LINE}${SH_BLUE}${GIT_PS1}${SH_WHITE}"> "${OUT_COL}

    alias qemu-run="qemu-system-arm -no-reboot -net none -nographic -M realview-pbx-a9 -m 256M -smp 4 -icount 8 -kernel *.exe"
    alias qemu-gdb="qemu-system-arm -no-reboot -net none -nographic -M realview-pbx-a9 -m 256M -smp 4 -icount 8 -s -S -kernel *.exe"
    alias rtems-gdb="arm-rtems4.12-gdb --command $HOME/Programming/rtems/arm.gdb *.exe"
    alias kill-qemu="killall qemu-system-arm"
}

awget() {
    local URL="$1"
    local WGET_PARAM="${@:2}"

    local USER="go7box"
    local PASS=$(pass Server/rutorrent/${USER})

    wget -c --progress bar --user ${USER} --password "${PASS}" $WGET_PARAM "$URL"
}

stream() {
    local URL="$1"
    local MPV_PARAM="${@:2}"

    local USER="go7box"
    local PASS=$(pass Server/rutorrent/${USER})

    local _final_url=$(sed -e "s#\(https://\)#\1${USER}:${PASS}@#" <<< "$URL")

    echo "$_final_url"

    # mpv --cache=204800 --cache-initial=10240 --cache-secs=100 "$_final_url"
    mpv --cache=2048000 --cache-secs=1000 "$MPV_PARAM" "$_final_url"
}

buildmutt() {
    if [[ $1 == "prepare" ]]; then
        ./prepare                   \
            --prefix=/usr           \
            --sysconfdir=/etc       \
            --enable-debug          \
            --enable-pgp            \
            --enable-smime          \
            --enable-sidebar        \
            --enable-gpgme          \
            --enable-notmuch        \
            --enable-compressed     \
            --enable-pop            \
            --enable-imap           \
            --enable-smtp           \
            --enable-nntp           \
            --enable-exact-address  \
            --enable-hcache         \
            --with-curses=/usr      \
            --with-regex            \
            --with-gss              \
            --with-ssl              \
            --with-sasl             \
            --with-idn
    elif [[ $1 == "build" ]]; then
        make
    fi
}

distos() {
    PIDFILE="/tmp/.ds-deb7.lock"
    if [[ "$1" == "gui" ]]; then
        OPTS="-usbdevice tablet"
    else
        OPTS="-vga none -nographic"
    fi

    if [[ ! -f $PIDFILE ]]; then
        qemu-system-x86_64 \
            -enable-kvm \
            -net user,hostfwd=tcp::8022-:22 \
            -net nic,model=virtio  \
            -m 1G,slots=2,maxmem=3G  \
            -name "Distributed Systems: Fedora" \
            -pidfile "$PIDFILE" \
            -cpu host \
            -M 1.6 \
            -machine type=pc,accel=kvm \
            ${OPTS} \
            -boot order=c \
            -drive file="$HOME/VirtualBox VMs/DistributedSystems/DS-Fedora/DS-Fedora.raw",format=raw,aio=native,cache=none
    else
        echo "Found existing PID file"
        PID=$(pgrep qemu-system-x86)
        if [[ -z $PID ]]; then
            echo "... But qemu process not found. Cleaning up PIDFile"
            rm -v -f "$PIDFILE"
            return 1
        fi
        echo "Trying to SSH into Virtual Machine ..."
        ssh "distos"
    fi
}

rustos() {

    _ARCH="x86_64"

    export RUSTOSDEV=true
    export PATH="$HOME/Programming/Rust-OS/toolchain/install/arch/${_ARCH}/bin":$PATH

    export PS1="\n"${SH_WHITE}${TL_ANGLE}"("${SH_BLUE}"\u"${SH_WHITE}"@"${SH_RED}"\h"${SH_WHITE}")"${HORIZ_LINE}"("${SH_GREEN}"\$?"${SH_WHITE}")"${HORIZ_LINE}"("${SH_GREEN}${BATT}${SH_WHITE}")"${HORIZ_LINE}"("${SH_GREEN}"\@ \d"${SH_WHITE}")"${HORIZ_LINE}"("${SH_RED}"RUSTOS"${SH_WHITE}")\n"${BL_ANGLE}${HORIZ_LINE}"("${SH_GREEN}"\w"${SH_WHITE}")"${HORIZ_LINE}"("${SH_YELLOW}${FILES_STAT}" files, "${FILES_SIZE}${SH_WHITE}")"${HORIZ_LINE}${SH_BLUE}${GIT_PS1}${SH_WHITE}"> "${OUT_COL}
}

# vim: set ft=sh ts=4 sts=4 sw=4 tw=80 et :
