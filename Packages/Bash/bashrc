#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# Ignore all duplicate lines AND commands that begin with a space in the history
HISTCONTROL="erasedups:ignoreboth"

# Suffixes that should be ignored during completion
export FIGNORE=$FIGNORE:.aux:.bbl:.blg:.toc:.o:

# Don't record some commands
export HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history:clear"

# Shell Builtin Settings
shopt -s autocd                  # No need to type cd anymore
shopt -s cdspell                 # Fix simple typos when cd'ing
shopt -s checkwinsize            # Check window size and adjust accordingly
shopt -s cmdhist                 # Save multiline commands in a single line
shopt -s histappend              # Append to HISTFILE instead of overwriting it
shopt -s dotglob                 # Include filenames beginning with '.' during expansion
shopt -s expand_aliases          # Expand aliases too
shopt -s nocaseglob              # Case insensitive pattern matching
shopt -s extglob                 # Extended pathname completion rules
shopt -s checkjobs               # Check if there are running jobs and refuse to exit
shopt -s dirspell                # Fix simple typos in directory name expansion
shopt -s no_empty_cmd_completion # Don't perform completions on empty lines
shopt -u force_fignore           # We want to files in FIGNORE to appear uf they are only
                                 # possible completions
# Automatically trim long paths in the prompt (requires Bash 4.x)
PROMPT_DIRTRIM=2
PROMPT_COMMAND='history -a'

# Set Shell Settings
set -o histexpand

# Set Readline Settings
bind "set show-all-if-ambiguous on"
bind "set completion-ignore-case on"
bind "set completion-map-case on"
set show-all-if-unmodified on
set skip-completed-text on

have() { command -v "$1" >&/dev/null; }

# Source the utlity files containing aliases and functions for Bash
[[ -f $HOME/.bash_aliases ]] && . ~/.bash_aliases
[[ -f $HOME/.bash_functions ]] && . ~/.bash_functions
[[ -f $HOME/.bash_completions ]] && . ~/.bash_completions
[[ -f $HOME/.bash_colours ]] && . ~/.bash_colours

[[ -f "/usr/share/doc/pkgfile/command-not-found.bash" ]] && . "/usr/share/doc/pkgfile/command-not-found.bash"

if [[ -f "/usr/share/git/completion/git-prompt.sh" ]]
then
	source "/usr/share/git/completion/git-prompt.sh"
else
    source $HOME/.git-prompt.sh
fi

[[ -f "$HOME/.config/ranger/bash.sh" ]] && . "$HOME/.config/ranger/bash.sh"

# Login greeting ------------------
if [[ -z "$STY" && ! "$SHOWED_SCREEN_MESSAGE" == "true" ]]; then
	detached_screens=($(screen -list | grep Detached | awk '{print $1}'))
	pad=$(printf '%0.1s' " "{1..60})
	padlength=34
    if [ ! ${#detached_screens[@]} -eq 0 ]; then
        echo "+---------------------------------------+"
        echo "| Detached screens are available:       |"
		for screenitem in "${detached_screens[@]}"; do
			printf "|   %s %*.*s |\n" "$screenitem" 0 $((padlength - ${#screenitem})) "$pad"
		done
        echo "+---------------------------------------+"

        export SHOWED_SCREEN_MESSAGE="true"
    fi
fi

GIT_PS1_SHOWDIRTYSTATE=1;
GIT_PS1_SHOWCOLORHINTS=1;
GIT_PS1_SHOWUNTRACKEDFILES=1;

SH_WHITE="\[\033[1;37m\]"
SH_BLUE="\[\033[1;34m\]"
SH_RED="\[\033[1;31m\]"
SH_GREEN="\[\033[1;32m\]"
SH_YELLOW="\[\033[1;33m\]"

BL_ANGLE="\342\224\224"
TL_ANGLE="\342\224\214"
HORIZ_LINE="\342\224\200"

BATT="\$(acpi -b | awk '{print \$4}' | cut -b1-3)"
FILES_STAT="\$(ls -1 | wc -l | sed 's: ::g')"
FILES_SIZE="\$(ls -lah | grep -m 1 total | sed 's/1:total //')b"
GIT_PS1='$(__git_ps1 "(%s)")'

if [ -z $STY ]
then
    # We are not in a Screen Session
    OUT_COL=$SH_RED
else
    # We are in a Screen session
    OUT_COL=$SH_GREEN
fi

if [ $UID -eq 0 ]; then
    PS1=${SH_RED}"\u"${SH_WHITE}"@\h "${SH_BLUE}"\W "${SH_GREEN}"\$ "${OUT_COL}
elif [ -n "$SSH_CLIENT" ]; then
    PS1=${SH_RED}"(SSH)"${SH_WHITE}"\u@\h "${SH_BLUE}"\W "${SH_GREEN}"\$ "${OUT_COL}
else
    PS1="\n"${SH_WHITE}${TL_ANGLE}"("${SH_BLUE}"\u"${SH_WHITE}"@"${SH_RED}"\h"${SH_WHITE}")"${HORIZ_LINE}"("${SH_GREEN}"\$?"${SH_WHITE}")"${HORIZ_LINE}"("${SH_GREEN}${BATT}${SH_WHITE}")"${HORIZ_LINE}"("${SH_GREEN}"\@ \d"${SH_WHITE}")\n"${BL_ANGLE}${HORIZ_LINE}"("${SH_GREEN}"\w"${SH_WHITE}")"${HORIZ_LINE}"("${SH_YELLOW}${FILES_STAT}" files, "${FILES_SIZE}${SH_WHITE}")"${HORIZ_LINE}${SH_BLUE}${GIT_PS1}${SH_WHITE}"> "${OUT_COL}
fi
trap 'echo -ne "\e[0m"' DEBUG
PS2='>> '
PS3='>>> '
PS4='+ '

export VISUAL=nvim
export TERM=xterm-256color
export BROWSER="firefox"
export XDG_RUNTIME_DIR=/run/user/$(id -u)

[[ -f ~/.bash_ssh ]] && . ~/.bash_ssh
