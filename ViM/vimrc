"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                         ViM Configuration File                              "
"                                                                             "
"  This file contains the various custom settings for the Vi IMproved editor  "
"                                                                             "
" (C)2013 Darshit Shah                                                        "
"                                                                             "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Ensure that files are UTF-8 Encoded by default {{{
if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
   set fileencodings=ucs-bom,utf-8,latin1
endif
" }}}

" General Editor Settings {{{
set nocompatible            " Use Vim defaults (much better!)
set bs=indent,eol,start     " Allow backspacing over everything in insert mode
set viminfo='20,\"50        " Read/write a .viminfo file, don't store more
                            " than 50 lines of registers
set history=50              " Keep 50 lines of command line history
set spellfile=$HOME/.vim/spell/en.utf-8.add
                            " Set a custom path for the spellfile
set autoread                " Automatically reload the buffer if the local file changes
set modeline                " Enable modeline support
let mapleader=","
set wildignore=*.swp,*.bak,*.pyc,*.class,*.o,*.~,*.aux,*.log,*.out,*.blg,*.lot,*.toc,*.pdf
set nrformats-=octal        " When using C-a / C-x, don't consider octals
                            " Ignore these files unconditionally
set omnifunc=syntaxcomplete#Complete
                            " Enable omni-completion in Vim
set lazyredraw              " Delay redrawing screen during macros. Performance boost
" Blinking cursor fix {{{
" Don't wake up system with blinking cursor:
" http://www.linuxpowertop.org/known.php
let &guicursor = &guicursor . ",a:blinkon0"
" }}}
" }}}

" Editor UI Settings {{{
set ruler                   " Show the cursor position all the time
set showcmd                 " Show the command you are currently typing
set formatoptions+=tcroqlnj
                            " Set various options for formatting text in Vim.
                            " See :help formatoptions for details
set wildmenu                " Use Wildcard expansion menu
set display+=lastline       " When lines exceed the screen size, display as much
                            " as possible. Useful for HTML development.
set so=7                    " Keep a buffer of 7 lines top and bottom when scrolling
set foldcolumn=1            " Keep a dedicated column for showing folds
set relativenumber          " Show relative line numbers
colorscheme vividchalk      " Set the theme for Vim
" }}}

" Indentation and Tab Settings {{{
set autoindent              " Always set autoindenting on
set smartindent             " Set smart indenting
set expandtab               " Expand Tabs to Spaces
set shiftwidth=4            " Number of columns to move at each indent level
set softtabstop=4           " Number of columns moved on a <tab> key
set tabstop=4               " Number of columns a Tab represents
set smarttab                " Enable Smart tab'ing
set textwidth=80            " Auto wrap at char 80
" }}}

" Search Options {{{
set smartcase               " Use smart case sensitivity when searching
set incsearch               " Use incremental search
set magic                   " Use magic regex during searches
"This unsets the 'last search pattern' register by hitting return
nnoremap <CR> :noh<CR><CR>
" }}}

" Mouse Settings {{{
set mouse=a                 " Use the mouse in all modes in Vim
set ttymouse=xterm2         " Set the terminal type on which we are running Vim
set ttyfast                 " Improves Vim scrolling performance
" }}}

" Status Line {{{
set laststatus=2            " Always show status bar
set statusline+=%<%F        " Full File path
set statusline+=\ [%{strlen(&fenc)?&fenc:'none'},%{&ff}]
                            " Display file encoding and format
set statusline+=%h%m%r%y    " Various metadata
set statusline+=%{fugitive#statusline()}
                            " Git
set statusline+=%=          " Begin Right aligned block
set statusline+=%{TagName()}
                            " Display current tag through Ctags
set statusline+=\ %c,%l/%L\ %P
                            " File Nav info
" }}}

" Vundle Configuration {{{

filetype off                " Required as a workaround. See #176
set rtp+=~/.vim/bundle/vundle/
                            " Edits the runtime path to include vundle
call vundle#rc()            " Initiate Vundle

" Always ensure that vundle manages vundle
Plugin 'gmarik/vundle'

" original repos on GitHub
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/syntastic'
Plugin 'majutsushi/tagbar'
Plugin 'bling/vim-airline'
Plugin 'plasticboy/vim-markdown'
Plugin 'sk1418/blockit'
Plugin 'tpope/vim-commentary'
Plugin 'szw/vim-ctrlspace'
Plugin 'bogado/file-line'
"Plugin 'Yggdroot/indentLine'
Plugin 'scrooloose/nerdtree'
Plugin 'a.vim'
Plugin 'python.vim'
Plugin 'dwm.vim'
Plugin 'wipeout'
"Plugin 'airblade/vim-gitgutter'
Plugin 'wikitopian/hardmode'
Plugin 'mrtazz/simplenote.vim'

" Manage Colourschemes {{{
Plugin 'biskark/vim-ultimate-colorscheme-utility'
" }}}
" LaTeX Plugins {{{
Plugin 'Valloric/YouCompleteMe'
Plugin 'godlygeek/tabular'
Plugin 'gerw/vim-latex-suite'
Plugin 'gerw/vim-tex-syntax'
" }}}

filetype plugin indent on   " required!
" }}}

" Reset autocmds {{{
autocmd!
" When a vimrc is sourced, the autocommands may be added again. Hence, clear all the autocommands
" before defining any of our own
"  }}}

" Autocmd  Settings {{{

" Set spell checking only on TeX files. Makes a lot more sense
autocmd FileType tex setlocal spell spelllang=en_us

" When editing a file, always jump to the last cursor position
autocmd BufReadPost *
\ if line("'\"") > 0 && line ("'\"") <= line("$") |
\   exe "normal! g'\"" |
\ endif

" Instead of reverting the cursor to the last position in the buffer, we
" set it to the first line when editing a git commit message
au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" don't write swapfile on most commonly used directories for NFS mounts or USB sticks
autocmd BufNewFile,BufReadPre /media/*,/mnt/* set directory=~/tmp,/var/tmp,/tmp

" Automatically enable hardmode always
"autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
" }}}

" Powerline settings {{{
let g:Powerline_symbols = 'fancy'
let g:airline_theme='badwolf'
" }}}

" CTags Settings {{{
let g:ctags_statusline=1
let g:generate_tags=1
" C-\ will open in a new tab
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
" }}}

" Keyboard Shortcuts {{{
iab <expr> dts strftime("%F")
iab <expr> dtt strftime("%F  Darshit Shah  <darnir@gmail.com>")
set pastetoggle=<F2>        " Toggle paste mode with <F2>
" Pressing <leader>ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>
" :W sudo saves the file
" (useful for handling the permission-denied error)
command W w !sudo tee % > /dev/null

" Toggle hardmode with <leader>h
nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>
nnoremap <leader><leader> <Esc>
inoremap <leader><leader> <Esc>

" }}}

" Syntastic Settings {{{
let g:syntastic_mode_map = { 'mode': 'active',
    \ 'active_filetypes': [],
    \ 'passive_filetypes': [] }
" }}}

" Syntax highlighting {{{
" Switch syntax highlighting on, when the terminal has colors Also switch on
" highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif
" }}}

" Breaking bad habits {{{
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
" }}}

" Custom Functions {{{
" AppendModeline() {{{
" Append modeline after last line in buffer.  Use substitute() instead of
" printf() to handle '%%s' modeline in LaTeX files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sts=%d sw=%d tw=%d %set :",
        \ &tabstop, &softtabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>
" }}}

" DiffOrig() {{{
" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.  Only define it when not
" defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
            \ | wincmd p | diffthis
endif
" }}}

" cursor sniper {{{
set updatetime=2000

function! MySetCursor()
	set cursorline
	set cursorcolumn
endfunction
function! MyUnSetCursor()
	set nocursorline
	set nocursorcolumn
endfunction

au! CursorHold * call MyUnSetCursor()
au! CursorMoved * call MySetCursor()
au! CursorMovedI * call MyUnSetCursor()
" }}}

" }}}

" Highlight trailing whitespaces {{{
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
" }}}

" Custom filetype definations {{{
au BufNewFile,BufRead CommitLog set filetype=changelog
au BufNewFile,BufRead *.px set filetype=perl
au BufNewFile,BufRead *.py set filetype=python
au BufNewFile,BufRead *.tex set filetype=tex
au BufNewFile,BufRead *.md set filetype=markdown
" }}}

source /media/truecrypt1/simplenoterc

" vim: set ts=4 sts=4 sw=4 tw=80 fdm=marker et :



